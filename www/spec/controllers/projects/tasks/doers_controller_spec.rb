require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Projects::Tasks::DoersController do


  let(:current_user){ Multify::User.create(email: 'current@user.com') }
  let(:project)     { current_user.projects.create(name: 'My First Project') }
  let(:task)        { project.task.create(name: 'Think of something to do') }

  # let(:potential_doer){ Multify::User.create(email: 'test@user.com') }

  # This should return the minimal set of attributes required to create a valid
  # Project::Task::Doer. As you add validations to Project::Task::Doer, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :email => user.email
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Project::Task::DoersController. Be sure to keep this updated too.
  def valid_session
    {
      :current_user_id => current_user.id,
      :authentication_token => 'FAKE AUTH TOKEN',
    }
  end

  def valid_params
    {
      :project_id => project.slug,
      :task_id => task.slug,
    }
  end

  describe "GET index" do
    it "assigns all project_task_doers as @project_task_doers" do
      doers = 3.times.map{ |n| Multify::User.create(email: "#{n}@example.com") }
      get :index, valid_params, valid_session
      assigns(:doers).should eq(doers)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Project::Task::Doer" do
        expect {
          post :create, {:project_task => valid_attributes}, valid_session
        }.to change(Project::Task::Doer, :count).by(1)
      end

      it "assigns a newly created project_task as @project_task" do
        post :create, {:project_task => valid_attributes}, valid_session
        assigns(:project_task).should be_a(Project::Task::Doer)
        assigns(:project_task).should be_persisted
      end

      it "redirects to the created project_task" do
        post :create, {:project_task => valid_attributes}, valid_session
        response.should redirect_to(Project::Task::Doer.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved project_task as @project_task" do
        # Trigger the behavior that occurs when invalid params are submitted
        Project::Task::Doer.any_instance.stub(:save).and_return(false)
        post :create, {:project_task => {  }}, valid_session
        assigns(:project_task).should be_a_new(Project::Task::Doer)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Project::Task::Doer.any_instance.stub(:save).and_return(false)
        post :create, {:project_task => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested project_task" do
      doer = Project::Task::Doer.create! valid_attributes
      expect {
        delete :destroy, {:id => doer.to_param}, valid_session
      }.to change(Project::Task::Doer, :count).by(-1)
    end

    it "redirects to the project_task_doers list" do
      doer = Project::Task::Doer.create! valid_attributes
      delete :destroy, {:id => doer.to_param}, valid_session
      response.should redirect_to(project_task_doers_url)
    end
  end

end
