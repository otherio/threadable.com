// Generated by CoffeeScript 1.6.3
var Sentry, events, nodeurl, os, quest, util, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('underscore');

os = require('os');

nodeurl = require('url');

quest = require('quest');

util = require('util');

events = require('events');

module.exports = Sentry = (function(_super) {
  __extends(Sentry, _super);

  function Sentry(settings) {
    this._send = __bind(this._send, this);
    this._parseDSN = __bind(this._parseDSN, this);
    this.message = __bind(this.message, this);
    this.error = __bind(this.error, this);
    this._parseDSN(process.env.SENTRY_DSN || "");
    if (settings != null) {
      if (_(settings).isString()) {
        this._parseDSN(settings);
      } else if (_(settings).isObject()) {
        _(this).extend(settings);
        if (_.every(['key', 'secret', 'project_id'], function(prop) {
          return _.has(settings, prop);
        })) {
          this.enabled = true;
        } else {
          this.enabled = false;
          this.disable_message = "Credentials you passed in aren't complete.";
        }
      } else {
        this.enabled = false;
        this.disable_message = "Sentry client expected String or Object as argument. You passed: " + settings + ".";
      }
    }
    _(this).defaults({
      hostname: os.hostname(),
      enable_env: ['production']
    });
    return;
  }

  Sentry.prototype.error = function(err, message, logger, extra) {
    var data;
    if (!(err instanceof Error)) {
      throw new Error('error must be an instance of Error');
    }
    data = {
      culprit: message,
      message: err.message,
      logger: logger,
      server_name: this.hostname,
      platform: 'node',
      level: 'error',
      extra: _(extra || {}).extend({
        stacktrace: err.stack
      })
    };
    return this._send(data);
  };

  Sentry.prototype.message = function(message, logger, extra) {
    var data;
    data = {
      message: message,
      logger: logger,
      level: 'info',
      extra: extra != null ? extra : void 0
    };
    return this._send(data);
  };

  Sentry.prototype._parseDSN = function(dsn) {
    var err, parsed, _ref;
    if (dsn) {
      parsed = nodeurl.parse(dsn);
      try {
        this.project_id = parsed.path.split('/')[1];
        _ref = parsed.auth.split(':'), this.key = _ref[0], this.secret = _ref[1];
        return this.enabled = true;
      } catch (_error) {
        err = _error;
        this.enabled = false;
        return this.disable_message = "Your SENTRY_DSN is invalid. Use correct DSN to enable your sentry client.";
      }
    } else {
      this.enabled = false;
      return this.disable_message = "You SENTRY_DSN is missing or empty. Sentry client is disabled.";
    }
  };

  Sentry.prototype._send = function(data) {
    var options, _ref,
      _this = this;
    if (!this.enabled) {
      return console.log(this.disable_message);
    }
    if (_ref = process.env.NODE_ENV, __indexOf.call(this.enable_env, _ref) < 0) {
      return console.log("If " + process.env.NODE_ENV + " was enabled, would have sent to Sentry:", data);
    }
    options = {
      uri: "https://app.getsentry.com/api/" + this.project_id + "/store/",
      method: 'post',
      headers: {
        'X-Sentry-Auth': "Sentry sentry_version=4, sentry_key=" + this.key + ", sentry_secret=" + this.secret + ", sentry_client=sentry-node/0.1.3"
      },
      json: data
    };
    return quest(options, function(err, res, body) {
      if ((err != null) || res.statusCode > 299) {
        console.error('Error posting event to Sentry:', err, body);
        return _this.emit("error", err);
      } else {
        return _this.emit("logged");
      }
    });
  };

  return Sentry;

})(events.EventEmitter);
